#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
    
my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
	/-d$/ and do {
		$debug = 1;
	};
}

sub binary_tree {
	my @A = @_;
	my %tree;
	my $min = 0;
	my @refs;
	
	for my $number ( @A ){
		my $ref = \%tree;
		my $depth = 0;
		push @refs, $ref;
		
		while( exists $ref->{ 'value' } ){
			$ref = $number < $ref->{ 'value' } ?
					\%{ $ref->{ 'left' } }
				:
					\%{ $ref->{ 'right' } }
				;
			push @ref, $ref;
			$depth ++;
			if( $depth > $min + 1 ){
				# TO BALANCE
				my $tmp_ref = $refs[ -4 ];
				# ?????????
				# ????????
				}
			}
		
		$ref->{ 'value' } = $number;
		}
	
	$debug and print "=" x 20, $/;
	$debug and print "@A\n";
	$debug and print Dumper( \%tree );
	$debug and print "$_ ==> $tree{ $_ }\n" for keys %tree;
	return %tree;
	}

sub binary_tree_sort {
	my %tree = binary_tree( @_ );
	my @A;
	
	my @refs;
	push @refs, \%tree;
	
	while( @refs ){
		my $ref = pop @refs;
		
		while( exists $ref->{ 'left' } ){
			push @refs, $ref;
			$ref = \%{ $ref->{ 'left' } };
			}
		
		push @A, $ref->{ 'value' };
		@refs and delete $refs[ -1 ]->{ 'left' };
		
		if( exists $ref->{ 'right' } ){
			$ref = \%{ $ref->{ 'right' } };
			push @refs, $ref;
			}
		}
	
	return @A;
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', binary_tree_sort( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
    
my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
	/-d$/ and do {
		$debug = 1;
	};
}

sub binary_tree {
	my @A = @_;
	my %tree;
	
	for my $number ( @A ){
		my $ref = \%tree;
		
		while( exists $ref->{ 'value' } ){
			$ref = $number < $ref->{ 'value' } ?
					\%{ $ref->{ 'left' } }
				:
					\%{ $ref->{ 'right' } }
			}
		
		$ref->{ 'value' } = $number;
		}
	
	$debug and print "=" x 20, $/;
	$debug and print "@A\n";
	$debug and print Dumper( \%tree );
	$debug and print "$_ ==> $tree{ $_ }\n" for keys %tree;
	return %tree;
	}

sub binary_tree_sort {
	my %tree = binary_tree( @_ );
	my @A;
	
	my @refs;
	push @refs, \%tree;
	
	while( @refs ){
		my $ref = pop @refs;
		
		while( exists $ref->{ 'left' } ){
			push @refs, $ref;
			$ref = \%{ $ref->{ 'left' } };
			}
		
		push @A, $ref->{ 'value' };
		@refs and delete $refs[ -1 ]->{ 'left' };
		
		if( exists $ref->{ 'right' } ){
			$ref = \%{ $ref->{ 'right' } };
			push @refs, $ref;
			}
		}
	
	return @A;
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', binary_tree_sort( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;

my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
}

sub bubble_sort {
	my @A = @_;
	for my $i ( reverse 1 .. @A - 1 ){
		for my $j ( 0 .. $i - 1 ){
			$A[ $j ] > $A[ $j + 1 ] and do {
				@A[ $j, $j + 1 ] = @A[ $j + 1, $j ];
				}
			}
		}
	
	return @A;
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', bubble_sort( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;

my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
}

sub half_presort {
	my @A = @_;
	return @A if @A < 2;
	
	for my $i ( 0 .. ( @A / 2 ) - 1 ){
		$A[ $i ] > $A[ -1 - $i ] and do {
			( $A[ $i ], $A[ -1 - $i ] ) = ( $A[ -1 - $i ], $A[ $i ] );
			};
		}
	
	my @arr;
	push @arr, half_presort( @A[ 0 .. ( @A / 2 ) - 1 ] );
	push @arr, half_presort( @A[ @A / 2 .. @A - 1 ] );
	
	return @arr;
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', half_presort( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
    
my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
	/-d$/ and do {
		$debug = 1;
	};
}

sub heap {
	my @A = @_;
	my %heap;
	
	@A and $heap{ 'value' } = shift @A;
	my @ways = map { -$_ } 1 .. 20;
	
	for my $number ( @A ){
		my $ref = \%heap;
		
		$ways[ 0 ] < 0 and do {
			my $way_gen = abs shift @ways;
			
			unshift @ways, map {
				sprintf "%0${way_gen}b", $_
				} 0 .. 2 ** $way_gen - 1;
			};
		
		my @way = split //, shift @ways;
		$debug and print "\@way:[@way]\n";
		
		for my $i ( @way ){
			my $direction = $i == 0 ? 'left' : 'right';
			
			$ref->{ 'value' } > $number and do {
				( $ref->{ 'value' }, $number ) = ( $number, $ref->{ 'value' } );
				};
			
			if( exists $ref->{ $direction } ){
				$ref = \%{ $ref->{ $direction } };
				}
			else{
				$ref->{ $direction }->{ 'value' } = $number;
				last;
				}			
			}
		}
	
	$debug and print "=" x 20, $/;
	$debug and print "\@A:@A\n";
	$debug and print Dumper( \%heap );
	$debug and print "$_ ==> $heap{ $_ }\n" for keys %heap;
	return %heap;
	}

sub heap_sort {
	my %heap = heap( @_ );
	my @A;
	
	my @refs;
	push @refs, \%heap;
	
	while( @refs ){
		my $min_ref = shift @refs;
		push @A, $min_ref->{ 'value' };
		
		exists $min_ref->{ 'left' } and do {
			my $value = $min_ref->{ 'left' }->{ 'value' };
			
			my $cnt = 0;
			for my $ref ( @refs ){ 
				last if $value <= $ref->{ 'value' };
				$cnt ++;
				}
			
			splice @refs, $cnt, 0, \%{ $min_ref->{ 'left' } };
			};
		
		exists $min_ref->{ 'right' } and do {
			my $value = $min_ref->{ 'right' }->{ 'value' };
			
			my $cnt = 0;
			for my $ref ( @refs ){ 
				last if $value <= $ref->{ 'value' };
				$cnt ++;
				}
			
			splice @refs, $cnt, 0, \%{ $min_ref->{ 'right' } };
			};
		
		}
	
	return @A;
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', heap_sort( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
    
my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";
my $find;

for (@opt){
	/-find(\d+)/ and do {
		$find = $1;
	};
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
	/-d$/ and do {
		$debug = 1;
	};
}

sub is_in_array__primitive {
	$find //= shift;
	my $found;
	
#	$find == $_ and ++ $found for @_;
	$found = grep $_ == $find, @_;
	
	return $found ? "TRUE" : "FALSE";
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', is_in_array__primitive( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;
use Data::Dumper;
    
my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";
my $find;

for (@opt){
	/-find(\d+)/ and do {
		$find = $1;
	};
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
	/-d$/ and do {
		$debug = 1;
	};
}

sub binary_tree {
	my @A = @_;
	my %tree;
	
	for my $number ( @A ){
		my $ref = \%tree;
		
		while( exists $ref->{ 'value' } ){
			$ref = $number < $ref->{ 'value' } ?
					\%{ $ref->{ 'left' } }
				:
					\%{ $ref->{ 'right' } }
			}
		
		$ref->{ 'value' } = $number;
		}
	
	$debug and print "=" x 20, $/;
	$debug and print "@A\n";
	$debug and print Dumper( \%tree );
	$debug and print "$_ ==> $tree{ $_ }\n" for keys %tree;
	return %tree;
	}

sub is_in_array__binary_tree {
	$find //= shift;
	my %tree = binary_tree( @_ );
	my $found = 0;
	my $ref = \%tree;
	
	while( my $cmp = $find <=> $ref->{ 'value' } || $found ++ ){
		my $direction = $cmp == -1 ? "left" : "right";
		
		if( exists $ref->{ $direction } ){
			$ref = \%{ $ref->{ $direction } };
			}
		else{
			last;
			}
		}
	
	return $found ? "TRUE" : "FALSE";
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', is_in_array__binary_tree( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;

my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
}

sub is_sorted {
	my @A = @_;
	my $false = 0;
	
	for my $i ( 0 .. @A - 2 ){
		last if $false += $A[ $i ] > $A[ $i + 1 ];
		}
	
	return $false ? "FALSE" : "TRUE";
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", is_sorted( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;

my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
	/-d$/ and do {
		$debug = 1;
	};
}

sub merge_sorted_lists_1 {
	my @refs = map { [ @{ $_ } ] } @_;	# no destruction
	my @A;
	
	while( @refs = grep { @{ $_ } } @refs ){
		
		my $min = $refs[ 0 ]->[ 0 ];
		my $ref_min = $refs[ 0 ];
		
		for my $ref ( @refs ){
			$min > $ref->[ 0 ] and do {
				$min = $ref->[ 0 ];
				$ref_min = $ref;
				};
			}
		
		push @A, shift @{ $ref_min };
		}
	
	return @A;
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', merge_sorted_lists_1( @data );
	$debug and print map "$_\n", join ' ', @{ $_ } for @data;
}
#!/usr/bin/perl

use warnings;
use strict;

my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
	/-d$/ and do {
		$debug = '';
	};
}

sub merge_sorted_lists_1 {
	my @refs = map { [ @{ $_ } ] } @_;	# no destruction
	my @A;
	
	while( @refs = grep { @{ $_ } } @refs ){
		
		my $min = $refs[ 0 ]->[ 0 ];
		my $ref_min = $refs[ 0 ];
		
		for my $ref ( @refs ){
			$min > $ref->[ 0 ] and do {
				$min = $ref->[ 0 ];
				$ref_min = $ref;
				};
			}
		
		push @A, shift @{ $ref_min };
		}
	
	return @A;
	}

sub merge_sort {
	my @A = @_;
	return @A if @A < 2;
	
	my @left = merge_sort( @A[ 0 .. ( @A / 2 ) - 1 ] );
	my @right = merge_sort( @A[ @A / 2 .. @A - 1 ] );
	
	return merge_sorted_lists_1( \@left, \@right );
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', merge_sort( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;

my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
	/-d$/ and do {
		$debug = '';
	};
}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', sort { $a <=> $b } ( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;

my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
}

sub selection_1_sort {
	my @A = @_;
	for my $i ( reverse 1 .. @A - 1 ){
		my $max = $A[ $i ];
		my $max_j = $i;
		for my $j ( 0 .. $i - 1 ){
			$A[ $j ] > $max and do {
				$max = $A[ $j ];
				$max_j = $j;
				}
			}
		( @A[ $max_j, $i ] ) = ( @A[ $i, $max_j ] );
		}
	
	return @A;
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', selection_1_sort( @{$_} ) for @data;
}
#!/usr/bin/perl

use warnings;
use strict;

my $debug = 0;

my @FILES;
my @opt;

for (@ARGV){
	/^-\S/ ? (push @opt, $_) : (push @FILES, $_);
}

my $split = " ";

for (@opt){
	/-tsv/ and do {
		$split = "\t";
	};
	/-csv/ and do {
		$split = ',';
	};
	/-cssv/ and do {
		$split = ', ';
	};
	/-ssv/ and do {
		$split = ' ';
	};
	/-nosep/ and do {
		$split = '';
	};
}

sub selection_2_sort {
	my @A = @_;
	for my $i ( reverse 1 .. @A - 1 ){
		for my $j ( 0 .. $i - 1 ){
			$A[ $j ] > $A[ $i ] and do {
				@A[ $j, $i ] = @A[ $i, $j ];
				}
			}
		}
	
	return @A;
	}

for (@FILES){
	my $in;
	/^-$/ or open $in, '<', $_ or die "$0: [$_] ... : $!\n";
	my @data = map { chomp; [ split $split ] } 
		grep m/./, (defined $in ? <$in> : <STDIN>);
	
	print map "$_\n", join ' ', selection_2_sort( @{$_} ) for @data;
}
